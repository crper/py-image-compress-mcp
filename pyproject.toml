[project]
name = "py-image-compress-mcp"
version = "0.3.0"
description = "High-performance MCP image compression service for AI assistants with intelligent optimization and batch processing capabilities"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "crper", email = "crper@outlook.com" }]
maintainers = [{ name = "crper", email = "crper@outlook.com" }]
keywords = [
    "mcp",
    "image",
    "compression",
    "ai",
    "claude",
    "pillow",
    "batch-processing",
    "optimization",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Typing :: Typed",
]

dependencies = [
    "fastmcp>=2.10.5",
    "humanize>=4.12.3",
    "numpy>=1.24.0",
    "pillow>=11.3.0",
    "pydantic>=2.11.7",
]


[project.urls]
Homepage = "https://github.com/crper/py-image-compress-mcp"
Repository = "https://github.com/crper/py-image-compress-mcp"
Issues = "https://github.com/crper/py-image-compress-mcp/issues"
Documentation = "https://github.com/crper/py-image-compress-mcp#readme"
Changelog = "https://github.com/crper/py-image-compress-mcp/releases"
"Bug Tracker" = "https://github.com/crper/py-image-compress-mcp/issues"
"Source Code" = "https://github.com/crper/py-image-compress-mcp"

[project.optional-dependencies]
xmp = [
    "defusedxml>=0.7.1", # XMP元数据支持
]

[project.scripts]
py-image-compress-mcp = "py_image_compress_mcp.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/py_image_compress_mcp"]

# ===== Tool Configuration =====

[tool.uv]
dev-dependencies = [
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-asyncio>=0.21.0",
    "rich>=14.0.0",
    "ruff>=0.12.4",
    "typer>=0.16.0",
    "types-defusedxml>=0.7.0.20250708",
]

# ===== Ruff Configuration =====
[tool.ruff]
target-version = "py310"
line-length = 88
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycaches__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "venv",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe
    "T20", # flake8-print
    "TID", # flake8-tidy-imports
    "ICN", # flake8-import-conventions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",   # Line length handled by formatter
    "T201",   # Allow print statements for debugging
    "TID252", # Allow relative imports from parent modules
    "RUF001", # Allow ambiguous unicode characters
    "RUF002", # Allow ambiguous unicode characters
    "RUF003", # Allow ambiguous unicode characters
]

mccabe.max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",     # Allow unused arguments in tests
    "PLR2004", # Allow magic numbers in tests
]
"__init__.py" = [
    "F401", # Allow unused imports
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["py_image_compress_mcp"]
force-single-line = false
lines-after-imports = 2

# ===== mypy Configuration =====
[tool.mypy]
python_version = "3.10"
mypy_path = ["src"]
files = ["src", "tests"]
exclude = ["build/", "dist/", ".venv/", "venv/", ".mypy_cache/"]

# 启用 Pydantic 插件（暂时禁用，直接使用 Pydantic 的内置类型支持）
# plugins = ["pydantic.mypy"]

# Basic settings
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Strict mode (progressive)
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
strict_optional = true

# Display
show_error_codes = true
show_column_numbers = true
pretty = true

# Package configuration
explicit_package_bases = true
no_site_packages = true

# Pydantic 插件配置
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "humanize.*",
    "PIL.*",
    "pytest.*",
    "numpy.*",
    "pydantic.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "py_image_compress_mcp.models.*"
# 对于 Pydantic 模型，放宽一些检查
disallow_subclassing_any = false
disallow_untyped_decorators = false
warn_return_any = false

[[tool.mypy.overrides]]
module = "py_image_compress_mcp.mcp_server"
# MCP 服务器使用第三方装饰器，放宽装饰器检查
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# ===== pytest Configuration =====
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["-v", "--strict-markers", "--tb=short"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

# ===== Coverage Configuration =====
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/examples/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
